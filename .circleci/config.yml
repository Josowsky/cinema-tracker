version: 2.1

jobs:
  deploy_production:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: "Build application Docker image"
          command: |
            env
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            touch env-variables.env
            echo "DATABASE=${DATABASE}" >> env-variables.env
            echo "DATABASE_USER=${DATABASE_USER}" >> env-variables.env
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> env-variables.env
            echo "DATABASE_HOSTNAME=${DATABASE_HOSTNAME}" >> env-variables.env
            echo "DATABASE_PORT=${DATABASE_PORT}" >> env-variables.env
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "${SSH_HOST} ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMhC3TfusdIUXynfhRmZFrutCFxiMWw36+7lg5cAU9UzdsjpMentSJVtO86bULiX5G75lMiF+L7GziOUquIOW6I=" >> ~/.ssh/known_hosts
              scp env-variables.env ${SSH_USERNAME}@${SSH_HOST}:${SSH_PATH}
              ssh ${SSH_USERNAME}@${SSH_HOST} '~/update-app.sh'
            fi

  test_and_lint_frontend:
    docker:
      - image: circleci/node:10.15.2
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: yarn install --frozen-lockfile
      - run: yarn workspace client test
      - run: yarn workspace client tslint
      - run: yarn workspace client lint
      - save_cache:
          key: cache-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache

workflows:
  build_test_deploy:
    jobs:
      - test_and_lint_frontend
      - deploy_production:
          requires:
            - test_and_lint_frontend
          filters:
            branches:
              only: master
